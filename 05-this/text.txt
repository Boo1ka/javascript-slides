1.
Привет. На этой неделе я расскажу вам о ключевом слове this в языке JavaScript

2.1. Возможно вы уже сталкивались с ним в других языках программирования.
Например в си шарп мы можем использовать this в следующем примере.
Объявим класс User который описывает некоторого пользователя.
Он состоит из приватного поля age в котором записан возраст и публичного метода
ShowAge поторый выводит на консоль возраст. Для того чтобы обратиться к полю класса
из его метода мы используем ключевое слово this после которого указываем название поля.
Таким образом создав экземпляр класса и позвав метод ShowAge мы увидим на консоли
значение поля age

2.2 Аналогичный пример мы можем написать на языке Java
Класс User по прежнему состоит из публичного метода showAge в котором выводит
на консоль значение приватного поля age, к которому обращаемся через ключевое слово this.
После создания инстанса класса и вызова метода мы также как и в предыдущем примере

2.3. Во всех этих примерах у this есть общие свойства.
Это ключевое слово языка и мы не можем его перезаписать. Но самое главное,
мы можем его использовать только в пределах объекта. За его пределами использование
this не имеет смысла.

2.4. Похожий пример на JavaScript мы можем написать следующим образом:
Объявим функцию User которая возвращает объект, состоящий из двух полей: age и showAge
Поле showAge обращяется к полю age через ключевое слово this. Создавая инстанс пользователя
и вызывая метод showAge мы увидим на консоли значение которое сохранено в поле age


...

5.1. Как мы уже поняли в предыдущем видео значение this определяется в момент
выполнения кода и зависит от нескольких факторов. В этом видео мы рассмотрим
чему равен this на различных участках кода.

5.2. Если мы обратимся к полю innerWith находясь в глобальном коде в браузере, то получим
значение 1280 равное ширине окна. Такое же значение мы получаем, когда обращаемся
к полю innerWith объекта window.

5.3. При выполнении кода на nodejs обращаясь к свойству process.version мы
получим строку содержащую версию нашего интерпретатора. Аналогичное значение
мы получим если обратимся к process.version у глобального объекта.

5.4. Вы наверняка не раз уже использовали console.log для вывода значений на консоль.
Но мало кто задумывался что свойство console мы вызываем у глобального объекта

...

7.1. Следующий фактор, который влияет на значение this это способ,
которым мы попали на тот или иной участок кода.

7.2. Опишем функцию getSelf которая возвращает текущее значение this.
При вызове такой функции возвращаемое значение будет равно текущему значению this.
Таким образом если мы позовем getSelf в основном коде, то она вернет глобальный объект
global или window в зависимости от того в каком окружении мы работаем

7.3. Если мы вызываем эту функцию в рамках модуля, то она вернет объект,
который модуль экспортирует. В нашем случае это объект, который содержит поле days
со значением 366.

8.1 Кроме простого вызова, мы можем вызвать функцию как метод объекта. Давайте
рассмотрим такой пример: объявим объект `block` со свойством innerHeight и методом
getHeight которое возвращает значение поля innerHeight в объекте this.
Важно понимать, что this определяется не в момент описания функции, а в момент
её выполнения
